{"ast":null,"code":"import { setTimerId, getTimerId, getDateAttribute } from './utils/dom';\nimport { formatDiff, diffSec, nextInterval } from './utils/date';\nimport { getLocale } from './register';\n// all realtime timer\nvar TIMER_POOL = {};\n/**\n * clear a timer from pool\n * @param tid\n */\nvar clear = function (tid) {\n  clearTimeout(tid);\n  delete TIMER_POOL[tid];\n};\n// run with timer(setTimeout)\nfunction run(node, date, localeFunc, opts) {\n  // clear the node's exist timer\n  clear(getTimerId(node));\n  var relativeDate = opts.relativeDate,\n    minInterval = opts.minInterval;\n  // get diff seconds\n  var diff = diffSec(date, relativeDate);\n  // render\n  node.innerText = formatDiff(diff, localeFunc);\n  var tid = setTimeout(function () {\n    run(node, date, localeFunc, opts);\n  }, Math.min(Math.max(nextInterval(diff), minInterval || 1) * 1000, 0x7fffffff));\n  // there is no need to save node in object. Just save the key\n  TIMER_POOL[tid] = 0;\n  setTimerId(node, tid);\n}\n/**\n * cancel a timer or all timers\n * @param node - node hosting the time string\n */\nexport function cancel(node) {\n  // cancel one\n  if (node) clear(getTimerId(node));\n  // cancel all\n  // @ts-ignore\n  else Object.keys(TIMER_POOL).forEach(clear);\n}\n/**\n * render a dom realtime\n * @param nodes\n * @param locale\n * @param opts\n */\nexport function render(nodes, locale, opts) {\n  // by .length\n  // @ts-ignore\n  var nodeList = nodes.length ? nodes : [nodes];\n  nodeList.forEach(function (node) {\n    run(node, getDateAttribute(node), getLocale(locale), opts || {});\n  });\n  return nodeList;\n}\n//# sourceMappingURL=realtime.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}