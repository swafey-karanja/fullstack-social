{"ast":null,"code":"/**\n * Index.js\n *\n * a request API compatible with window.fetch\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */\n\nimport http from 'node:http';\nimport https from 'node:https';\nimport zlib from 'node:zlib';\nimport Stream, { PassThrough, pipeline as pump } from 'node:stream';\nimport { Buffer } from 'node:buffer';\nimport dataUriToBuffer from 'data-uri-to-buffer';\nimport { writeToStream, clone } from './body.js';\nimport Response from './response.js';\nimport Headers, { fromRawHeaders } from './headers.js';\nimport Request, { getNodeRequestOptions } from './request.js';\nimport { FetchError } from './errors/fetch-error.js';\nimport { AbortError } from './errors/abort-error.js';\nimport { isRedirect } from './utils/is-redirect.js';\nimport { FormData } from 'formdata-polyfill/esm.min.js';\nimport { isDomainOrSubdomain, isSameProtocol } from './utils/is.js';\nimport { parseReferrerPolicyFromHeader } from './utils/referrer.js';\nimport { Blob, File, fileFromSync, fileFrom, blobFromSync, blobFrom } from 'fetch-blob/from.js';\nexport { FormData, Headers, Request, Response, FetchError, AbortError, isRedirect };\nexport { Blob, File, fileFromSync, fileFrom, blobFromSync, blobFrom };\nconst supportedSchemas = new Set(['data:', 'http:', 'https:']);\n\n/**\n * Fetch function\n *\n * @param   {string | URL | import('./request').default} url - Absolute url or Request instance\n * @param   {*} [options_] - Fetch options\n * @return  {Promise<import('./response').default>}\n */\nexport default async function fetch(url, options_) {\n  return new Promise((resolve, reject) => {\n    // Build request object\n    const request = new Request(url, options_);\n    const {\n      parsedURL,\n      options\n    } = getNodeRequestOptions(request);\n    if (!supportedSchemas.has(parsedURL.protocol)) {\n      throw new TypeError(`node-fetch cannot load ${url}. URL scheme \"${parsedURL.protocol.replace(/:$/, '')}\" is not supported.`);\n    }\n    if (parsedURL.protocol === 'data:') {\n      const data = dataUriToBuffer(request.url);\n      const response = new Response(data, {\n        headers: {\n          'Content-Type': data.typeFull\n        }\n      });\n      resolve(response);\n      return;\n    }\n\n    // Wrap http.request into fetch\n    const send = (parsedURL.protocol === 'https:' ? https : http).request;\n    const {\n      signal\n    } = request;\n    let response = null;\n    const abort = () => {\n      const error = new AbortError('The operation was aborted.');\n      reject(error);\n      if (request.body && request.body instanceof Stream.Readable) {\n        request.body.destroy(error);\n      }\n      if (!response || !response.body) {\n        return;\n      }\n      response.body.emit('error', error);\n    };\n    if (signal && signal.aborted) {\n      abort();\n      return;\n    }\n    const abortAndFinalize = () => {\n      abort();\n      finalize();\n    };\n\n    // Send request\n    const request_ = send(parsedURL.toString(), options);\n    if (signal) {\n      signal.addEventListener('abort', abortAndFinalize);\n    }\n    const finalize = () => {\n      request_.abort();\n      if (signal) {\n        signal.removeEventListener('abort', abortAndFinalize);\n      }\n    };\n    request_.on('error', error => {\n      reject(new FetchError(`request to ${request.url} failed, reason: ${error.message}`, 'system', error));\n      finalize();\n    });\n    fixResponseChunkedTransferBadEnding(request_, error => {\n      if (response && response.body) {\n        response.body.destroy(error);\n      }\n    });\n\n    /* c8 ignore next 18 */\n    if (process.version < 'v14') {\n      // Before Node.js 14, pipeline() does not fully support async iterators and does not always\n      // properly handle when the socket close/end events are out of order.\n      request_.on('socket', s => {\n        let endedWithEventsCount;\n        s.prependListener('end', () => {\n          endedWithEventsCount = s._eventsCount;\n        });\n        s.prependListener('close', hadError => {\n          // if end happened before close but the socket didn't emit an error, do it now\n          if (response && endedWithEventsCount < s._eventsCount && !hadError) {\n            const error = new Error('Premature close');\n            error.code = 'ERR_STREAM_PREMATURE_CLOSE';\n            response.body.emit('error', error);\n          }\n        });\n      });\n    }\n    request_.on('response', response_ => {\n      request_.setTimeout(0);\n      const headers = fromRawHeaders(response_.rawHeaders);\n\n      // HTTP fetch step 5\n      if (isRedirect(response_.statusCode)) {\n        // HTTP fetch step 5.2\n        const location = headers.get('Location');\n\n        // HTTP fetch step 5.3\n        let locationURL = null;\n        try {\n          locationURL = location === null ? null : new URL(location, request.url);\n        } catch {\n          // error here can only be invalid URL in Location: header\n          // do not throw when options.redirect == manual\n          // let the user extract the errorneous redirect URL\n          if (request.redirect !== 'manual') {\n            reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, 'invalid-redirect'));\n            finalize();\n            return;\n          }\n        }\n\n        // HTTP fetch step 5.5\n        switch (request.redirect) {\n          case 'error':\n            reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));\n            finalize();\n            return;\n          case 'manual':\n            // Nothing to do\n            break;\n          case 'follow':\n            {\n              // HTTP-redirect fetch step 2\n              if (locationURL === null) {\n                break;\n              }\n\n              // HTTP-redirect fetch step 5\n              if (request.counter >= request.follow) {\n                reject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));\n                finalize();\n                return;\n              }\n\n              // HTTP-redirect fetch step 6 (counter increment)\n              // Create a new Request object.\n              const requestOptions = {\n                headers: new Headers(request.headers),\n                follow: request.follow,\n                counter: request.counter + 1,\n                agent: request.agent,\n                compress: request.compress,\n                method: request.method,\n                body: clone(request),\n                signal: request.signal,\n                size: request.size,\n                referrer: request.referrer,\n                referrerPolicy: request.referrerPolicy\n              };\n\n              // when forwarding sensitive headers like \"Authorization\",\n              // \"WWW-Authenticate\", and \"Cookie\" to untrusted targets,\n              // headers will be ignored when following a redirect to a domain\n              // that is not a subdomain match or exact match of the initial domain.\n              // For example, a redirect from \"foo.com\" to either \"foo.com\" or \"sub.foo.com\"\n              // will forward the sensitive headers, but a redirect to \"bar.com\" will not.\n              // headers will also be ignored when following a redirect to a domain using\n              // a different protocol. For example, a redirect from \"https://foo.com\" to \"http://foo.com\"\n              // will not forward the sensitive headers\n              if (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {\n                for (const name of ['authorization', 'www-authenticate', 'cookie', 'cookie2']) {\n                  requestOptions.headers.delete(name);\n                }\n              }\n\n              // HTTP-redirect fetch step 9\n              if (response_.statusCode !== 303 && request.body && options_.body instanceof Stream.Readable) {\n                reject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));\n                finalize();\n                return;\n              }\n\n              // HTTP-redirect fetch step 11\n              if (response_.statusCode === 303 || (response_.statusCode === 301 || response_.statusCode === 302) && request.method === 'POST') {\n                requestOptions.method = 'GET';\n                requestOptions.body = undefined;\n                requestOptions.headers.delete('content-length');\n              }\n\n              // HTTP-redirect fetch step 14\n              const responseReferrerPolicy = parseReferrerPolicyFromHeader(headers);\n              if (responseReferrerPolicy) {\n                requestOptions.referrerPolicy = responseReferrerPolicy;\n              }\n\n              // HTTP-redirect fetch step 15\n              resolve(fetch(new Request(locationURL, requestOptions)));\n              finalize();\n              return;\n            }\n          default:\n            return reject(new TypeError(`Redirect option '${request.redirect}' is not a valid value of RequestRedirect`));\n        }\n      }\n\n      // Prepare response\n      if (signal) {\n        response_.once('end', () => {\n          signal.removeEventListener('abort', abortAndFinalize);\n        });\n      }\n      let body = pump(response_, new PassThrough(), error => {\n        if (error) {\n          reject(error);\n        }\n      });\n      // see https://github.com/nodejs/node/pull/29376\n      /* c8 ignore next 3 */\n      if (process.version < 'v12.10') {\n        response_.on('aborted', abortAndFinalize);\n      }\n      const responseOptions = {\n        url: request.url,\n        status: response_.statusCode,\n        statusText: response_.statusMessage,\n        headers,\n        size: request.size,\n        counter: request.counter,\n        highWaterMark: request.highWaterMark\n      };\n\n      // HTTP-network fetch step 12.1.1.3\n      const codings = headers.get('Content-Encoding');\n\n      // HTTP-network fetch step 12.1.1.4: handle content codings\n\n      // in following scenarios we ignore compression support\n      // 1. compression support is disabled\n      // 2. HEAD request\n      // 3. no Content-Encoding header\n      // 4. no content response (204)\n      // 5. content not modified response (304)\n      if (!request.compress || request.method === 'HEAD' || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {\n        response = new Response(body, responseOptions);\n        resolve(response);\n        return;\n      }\n\n      // For Node v6+\n      // Be less strict when decoding compressed responses, since sometimes\n      // servers send slightly invalid responses that are still accepted\n      // by common browsers.\n      // Always using Z_SYNC_FLUSH is what cURL does.\n      const zlibOptions = {\n        flush: zlib.Z_SYNC_FLUSH,\n        finishFlush: zlib.Z_SYNC_FLUSH\n      };\n\n      // For gzip\n      if (codings === 'gzip' || codings === 'x-gzip') {\n        body = pump(body, zlib.createGunzip(zlibOptions), error => {\n          if (error) {\n            reject(error);\n          }\n        });\n        response = new Response(body, responseOptions);\n        resolve(response);\n        return;\n      }\n\n      // For deflate\n      if (codings === 'deflate' || codings === 'x-deflate') {\n        // Handle the infamous raw deflate response from old servers\n        // a hack for old IIS and Apache servers\n        const raw = pump(response_, new PassThrough(), error => {\n          if (error) {\n            reject(error);\n          }\n        });\n        raw.once('data', chunk => {\n          // See http://stackoverflow.com/questions/37519828\n          if ((chunk[0] & 0x0F) === 0x08) {\n            body = pump(body, zlib.createInflate(), error => {\n              if (error) {\n                reject(error);\n              }\n            });\n          } else {\n            body = pump(body, zlib.createInflateRaw(), error => {\n              if (error) {\n                reject(error);\n              }\n            });\n          }\n          response = new Response(body, responseOptions);\n          resolve(response);\n        });\n        raw.once('end', () => {\n          // Some old IIS servers return zero-length OK deflate responses, so\n          // 'data' is never emitted. See https://github.com/node-fetch/node-fetch/pull/903\n          if (!response) {\n            response = new Response(body, responseOptions);\n            resolve(response);\n          }\n        });\n        return;\n      }\n\n      // For br\n      if (codings === 'br') {\n        body = pump(body, zlib.createBrotliDecompress(), error => {\n          if (error) {\n            reject(error);\n          }\n        });\n        response = new Response(body, responseOptions);\n        resolve(response);\n        return;\n      }\n\n      // Otherwise, use response as-is\n      response = new Response(body, responseOptions);\n      resolve(response);\n    });\n\n    // eslint-disable-next-line promise/prefer-await-to-then\n    writeToStream(request_, request).catch(reject);\n  });\n}\nfunction fixResponseChunkedTransferBadEnding(request, errorCallback) {\n  const LAST_CHUNK = Buffer.from('0\\r\\n\\r\\n');\n  let isChunkedTransfer = false;\n  let properLastChunkReceived = false;\n  let previousChunk;\n  request.on('response', response => {\n    const {\n      headers\n    } = response;\n    isChunkedTransfer = headers['transfer-encoding'] === 'chunked' && !headers['content-length'];\n  });\n  request.on('socket', socket => {\n    const onSocketClose = () => {\n      if (isChunkedTransfer && !properLastChunkReceived) {\n        const error = new Error('Premature close');\n        error.code = 'ERR_STREAM_PREMATURE_CLOSE';\n        errorCallback(error);\n      }\n    };\n    const onData = buf => {\n      properLastChunkReceived = Buffer.compare(buf.slice(-5), LAST_CHUNK) === 0;\n\n      // Sometimes final 0-length chunk and end of message code are in separate packets\n      if (!properLastChunkReceived && previousChunk) {\n        properLastChunkReceived = Buffer.compare(previousChunk.slice(-3), LAST_CHUNK.slice(0, 3)) === 0 && Buffer.compare(buf.slice(-2), LAST_CHUNK.slice(3)) === 0;\n      }\n      previousChunk = buf;\n    };\n    socket.prependListener('close', onSocketClose);\n    socket.on('data', onData);\n    request.on('close', () => {\n      socket.removeListener('close', onSocketClose);\n      socket.removeListener('data', onData);\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}