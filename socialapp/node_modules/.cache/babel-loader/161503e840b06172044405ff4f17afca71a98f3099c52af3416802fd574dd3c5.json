{"ast":null,"code":"import Blob from './index.js';\nconst _File = class File extends Blob {\n  #lastModified = 0;\n  #name = '';\n\n  /**\n   * @param {*[]} fileBits\n   * @param {string} fileName\n   * @param {{lastModified?: number, type?: string}} options\n   */ // @ts-ignore\n  constructor(fileBits, fileName, options = {}) {\n    if (arguments.length < 2) {\n      throw new TypeError(`Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`);\n    }\n    super(fileBits, options);\n    if (options === null) options = {};\n\n    // Simulate WebIDL type casting for NaN value in lastModified option.\n    const lastModified = options.lastModified === undefined ? Date.now() : Number(options.lastModified);\n    if (!Number.isNaN(lastModified)) {\n      this.#lastModified = lastModified;\n    }\n    this.#name = String(fileName);\n  }\n  get name() {\n    return this.#name;\n  }\n  get lastModified() {\n    return this.#lastModified;\n  }\n  get [Symbol.toStringTag]() {\n    return 'File';\n  }\n  static [Symbol.hasInstance](object) {\n    return !!object && object instanceof Blob && /^(File)$/.test(object[Symbol.toStringTag]);\n  }\n};\n\n/** @type {typeof globalThis.File} */ // @ts-ignore\nexport const File = _File;\nexport default File;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}