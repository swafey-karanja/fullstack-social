{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\n/**\n * Allows child elements to be transitioned in and out.\n *\n * Demos:\n *\n * - [Transitions](https://mui.com/base-ui/react-transitions/#hooks)\n *\n * API:\n *\n * - [useTransitionTrigger API](https://mui.com/base-ui/react-transitions/hooks-api/#use-transition-trigger)\n */\nexport function useTransitionTrigger(requestEnter) {\n  const [state, dispatch] = React.useReducer(transitionStateReducer, {\n    elementExited: !requestEnter,\n    inProgress: false\n  });\n  const hasTransition = React.useRef(false);\n  const handleEntering = React.useCallback(() => {\n    dispatch('entering');\n  }, []);\n  const handleEntered = React.useCallback(() => {\n    dispatch('entered');\n  }, []);\n  const handleExiting = React.useCallback(() => {\n    dispatch('exiting');\n  }, []);\n  const handleExited = React.useCallback(() => {\n    dispatch('exited');\n  }, []);\n  React.useEffect(() => {\n    if (!hasTransition.current) {\n      if (requestEnter) {\n        dispatch('entered');\n      } else {\n        dispatch('exited');\n      }\n    }\n  }, [requestEnter]);\n  const registerTransition = React.useCallback(() => {\n    hasTransition.current = true;\n    return () => {\n      hasTransition.current = false;\n    };\n  }, []);\n  const contextValue = React.useMemo(() => ({\n    requestedEnter: requestEnter,\n    onEntering: handleEntering,\n    onEntered: handleEntered,\n    onExiting: handleExiting,\n    onExited: handleExited,\n    registerTransition,\n    hasExited: state.elementExited\n  }), [handleEntering, handleEntered, handleExiting, handleExited, requestEnter, registerTransition, state.elementExited]);\n  return {\n    contextValue,\n    hasExited: state.elementExited,\n    transitionInProgress: state.inProgress\n  };\n}\nfunction transitionStateReducer(_, action) {\n  switch (action) {\n    case 'entering':\n      return {\n        elementExited: false,\n        inProgress: true\n      };\n    case 'entered':\n      return {\n        elementExited: false,\n        inProgress: false\n      };\n    case 'exiting':\n      return {\n        elementExited: false,\n        inProgress: true\n      };\n    case 'exited':\n      return {\n        elementExited: true,\n        inProgress: false\n      };\n    default:\n      throw new Error(`Unhandled action: ${action}`);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}