import { MDCRipple } from '@material/ripple';
import { h } from "@stencil/core";
export class Fab {
    constructor() {
        /**
         * Optional, specifies the FAB size
         */
        this.size = 'medium';
        /**
         * Optional, animates the FAB out of view.
         *
         * When set to false, the FAB will return to view.
         */
        this.hidden = false;
    }
    componentWillLoad() {
        if (!this.icon && !this.label) {
            throw '[materials][FAB] You should define at least a label or an icon';
        }
    }
    componentDidLoad() {
        MDCRipple.attachTo(this.host.shadowRoot.querySelector('.mdc-fab'));
    }
    renderIcon() {
        return this.icon ? (h("materials-icon", { name: this.icon })) : null;
    }
    render() {
        return (h("button", { class: { 'mdc-fab': true, 'mdc-fab--extended': !!this.label, 'mdc-fab--mini': this.size === 'small', 'mdc-fab--exited': this.hidden } },
            this.icon && h("span", { class: "mdc-fab__icon material-icons" }, this.renderIcon()),
            this.label && h("span", { class: "mdc-fab__label" }, this.label)));
    }
    static get is() { return "materials-fab"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["fab.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["fab.css"]
    }; }
    static get properties() { return {
        "icon": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Optionnal, an icon name from the material icons set"
            },
            "attribute": "icon",
            "reflect": false
        },
        "label": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Optionnal, a text label\n\nIf provided, it will render as an extended FAB"
            },
            "attribute": "label",
            "reflect": false
        },
        "size": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'medium' | 'small'",
                "resolved": "\"medium\" | \"small\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Optional, specifies the FAB size"
            },
            "attribute": "size",
            "reflect": false,
            "defaultValue": "'medium'"
        },
        "hidden": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Optional, animates the FAB out of view.\n\nWhen set to false, the FAB will return to view."
            },
            "attribute": "hidden",
            "reflect": false,
            "defaultValue": "false"
        }
    }; }
    static get elementRef() { return "host"; }
}
