export class MaterialsAlertController {
    /** Create a HTMLMaterialsDialogElement and returns it */
    async create(opts) {
        const dialog = document.createElement('materials-dialog');
        dialog.dialogTitle = opts.title;
        dialog.actions = [];
        if (opts.cancelText) {
            dialog.actions.push({
                label: opts.cancelText,
                role: 'close',
                action: opts.onCancel
            });
        }
        dialog.actions.push({
            label: opts.acceptText,
            role: 'accept',
            action: opts.onAccept
        });
        dialog.body = opts.message;
        dialog.addEventListener('accept', () => dialog.remove());
        dialog.addEventListener('cancel', () => dialog.remove());
        document.body.appendChild(dialog);
        return dialog;
    }
    static get is() { return "materials-alert-controller"; }
    static get encapsulation() { return "shadow"; }
    static get methods() { return {
        "create": {
            "complexType": {
                "signature": "(opts: AlertOpts) => Promise<HTMLMaterialsDialogElement>",
                "parameters": [{
                        "tags": [],
                        "text": ""
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    },
                    "HTMLMaterialsDialogElement": {
                        "location": "global"
                    },
                    "AlertOpts": {
                        "location": "import",
                        "path": "./alert-opts"
                    }
                },
                "return": "Promise<HTMLMaterialsDialogElement>"
            },
            "docs": {
                "text": "Create a HTMLMaterialsDialogElement and returns it",
                "tags": []
            }
        }
    }; }
}
